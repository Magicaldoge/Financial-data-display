import tkinter as tk
import requests
import json
import locale

root = tk.Tk()
root.title("Financial App")
root.geometry("400x400")

# Set the locale for numerical formatting
locale.setlocale(locale.LC_ALL, 'en_US')

# API key for Alpha Vantage API
api_key = "<DZ3NK0T921ABVCH7>"

# Create the GUI elements
ticker_label = tk.Label(root, text="Enter stock ticker symbol:")
ticker_label.pack(pady=10)

ticker_entry = tk.Entry(root, width=30)
ticker_entry.pack(pady=10)

data_label = tk.Label(root, text="")
data_label.pack(pady=10)

# Define the function to retrieve the financial data
def retrieve_data():
    # Get the stock ticker symbol from the text box
    ticker = ticker_entry.get()

    # Define the API endpoint and parameters for Alpha Vantage API
    endpoint = 'https://www.alphavantage.co/query'
    params = {'function': 'TIME_SERIES_DAILY_ADJUSTED', 'symbol': ticker, 'apikey': api_key}

    # Make a request to the Alpha Vantage API
    response = requests.get(endpoint, params=params)
    data = json.loads(response.text)

    # Extract the relevant financial data
    daily_prices = data['Time Series (Daily)']
    data_text = ""

    for date, prices in daily_prices.items():
        data_text += f"{date}: Open: {prices['1. open']}, Close: {prices['4. close']}\n"

    # Make API request for balance sheet data
    url = f"https://www.alphavantage.co/query?function=BALANCE_SHEET&symbol={ticker}&apikey={api_key}"
    response = requests.get(url)
    data = response.json()

    # Extract most recent balance sheet data
    try:
        latest_balance_sheet = data.get("annualReports", [])[0]
        date = latest_balance_sheet.get("fiscalDateEnding", "N/A")
        current_assets = int(latest_balance_sheet.get("totalCurrentAssets", 0))
        current_liabilities = int(latest_balance_sheet.get("totalCurrentLiabilities", 0))
        total_shareholder_equity = int(latest_balance_sheet.get("totalShareholderEquity", 0))
        common_stock_shares_outstanding = int(latest_balance_sheet.get("commonStockSharesOutstanding", 0))

        # Calculate current ratio
        current_ratio = round(current_assets / current_liabilities, 2)

        # Format numbers with commas
        current_assets_formatted = locale.format_string("%d", current_assets, grouping=True)
        current_liabilities_formatted = locale.format_string("%d", current_liabilities, grouping=True)
        total_shareholder_equity_formatted = locale.format_string("%d", total_shareholder_equity, grouping=True)
        common_stock_shares_outstanding_formatted = locale.format_string("%d", common_stock_shares_outstanding, grouping=True)

        # Update data_text with current assets, liabilities, current ratio, and common stock outstanding
        data_text = f"Current Assets: {current_assets_formatted}\nCurrent Liabilities: {current_liabilities_formatted}\nCurrent Ratio: {current_ratio}\nTotal Shareholder's Equity: {total_shareholder_equity_formatted}\nCommon Stock Shares Outstanding: {common_stock_shares_outstanding_formatted}"

    except IndexError:
        data_text += f"\nNo balance sheet data available for {ticker}"

    # Display the financial data in a label
    data_label.config(text=data_text)

# Create the "Retrieve Data" button and attach the retrieve_data function to it
button = tk.Button(root, text="Retrieve Data", command=retrieve_data)
button.pack(pady=10)

root.mainloop()
